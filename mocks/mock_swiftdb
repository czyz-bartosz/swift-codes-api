// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Bartosz\GolandProjects\awesomeProject\dbs\SwiftDb.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\Bartosz\GolandProjects\awesomeProject\dbs\SwiftDb.go -destination=mocks/mock_swiftdb .go -package=mocks
//

// Package mock_dbs is a generated GoMock package.
package mock_dbs

import (
	dbs "awesomeProject/dbs"
	context "context"
	sql "database/sql"
	reflect "reflect"

	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockSelectQuery is a mock of SelectQuery interface.
type MockSelectQuery struct {
	ctrl     *gomock.Controller
	recorder *MockSelectQueryMockRecorder
	isgomock struct{}
}

// MockSelectQueryMockRecorder is the mock recorder for MockSelectQuery.
type MockSelectQueryMockRecorder struct {
	mock *MockSelectQuery
}

// NewMockSelectQuery creates a new mock instance.
func NewMockSelectQuery(ctrl *gomock.Controller) *MockSelectQuery {
	mock := &MockSelectQuery{ctrl: ctrl}
	mock.recorder = &MockSelectQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectQuery) EXPECT() *MockSelectQueryMockRecorder {
	return m.recorder
}

// Model mocks base method.
func (m *MockSelectQuery) Model(model any) *bun.SelectQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(*bun.SelectQuery)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockSelectQueryMockRecorder) Model(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSelectQuery)(nil).Model), model)
}

// Scan mocks base method.
func (m *MockSelectQuery) Scan(ctx context.Context, dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockSelectQueryMockRecorder) Scan(ctx any, dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockSelectQuery)(nil).Scan), varargs...)
}

// Where mocks base method.
func (m *MockSelectQuery) Where(query string, args ...any) *bun.SelectQuery {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*bun.SelectQuery)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockSelectQueryMockRecorder) Where(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSelectQuery)(nil).Where), varargs...)
}

// MockInsertQuery is a mock of InsertQuery interface.
type MockInsertQuery struct {
	ctrl     *gomock.Controller
	recorder *MockInsertQueryMockRecorder
	isgomock struct{}
}

// MockInsertQueryMockRecorder is the mock recorder for MockInsertQuery.
type MockInsertQueryMockRecorder struct {
	mock *MockInsertQuery
}

// NewMockInsertQuery creates a new mock instance.
func NewMockInsertQuery(ctrl *gomock.Controller) *MockInsertQuery {
	mock := &MockInsertQuery{ctrl: ctrl}
	mock.recorder = &MockInsertQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertQuery) EXPECT() *MockInsertQueryMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockInsertQuery) Exec(ctx context.Context, dest ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockInsertQueryMockRecorder) Exec(ctx any, dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockInsertQuery)(nil).Exec), varargs...)
}

// Model mocks base method.
func (m *MockInsertQuery) Model(model any) *bun.InsertQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(*bun.InsertQuery)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockInsertQueryMockRecorder) Model(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockInsertQuery)(nil).Model), model)
}

// MockDeleteQuery is a mock of DeleteQuery interface.
type MockDeleteQuery struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteQueryMockRecorder
	isgomock struct{}
}

// MockDeleteQueryMockRecorder is the mock recorder for MockDeleteQuery.
type MockDeleteQueryMockRecorder struct {
	mock *MockDeleteQuery
}

// NewMockDeleteQuery creates a new mock instance.
func NewMockDeleteQuery(ctrl *gomock.Controller) *MockDeleteQuery {
	mock := &MockDeleteQuery{ctrl: ctrl}
	mock.recorder = &MockDeleteQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteQuery) EXPECT() *MockDeleteQueryMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDeleteQuery) Exec(ctx context.Context, dest ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDeleteQueryMockRecorder) Exec(ctx any, dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDeleteQuery)(nil).Exec), varargs...)
}

// Model mocks base method.
func (m *MockDeleteQuery) Model(model any) *bun.DeleteQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", model)
	ret0, _ := ret[0].(*bun.DeleteQuery)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDeleteQueryMockRecorder) Model(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDeleteQuery)(nil).Model), model)
}

// Where mocks base method.
func (m *MockDeleteQuery) Where(query string, args ...any) *bun.DeleteQuery {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*bun.DeleteQuery)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDeleteQueryMockRecorder) Where(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDeleteQuery)(nil).Where), varargs...)
}

// MockRawQuery is a mock of RawQuery interface.
type MockRawQuery struct {
	ctrl     *gomock.Controller
	recorder *MockRawQueryMockRecorder
	isgomock struct{}
}

// MockRawQueryMockRecorder is the mock recorder for MockRawQuery.
type MockRawQueryMockRecorder struct {
	mock *MockRawQuery
}

// NewMockRawQuery creates a new mock instance.
func NewMockRawQuery(ctrl *gomock.Controller) *MockRawQuery {
	mock := &MockRawQuery{ctrl: ctrl}
	mock.recorder = &MockRawQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawQuery) EXPECT() *MockRawQueryMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRawQuery) Scan(ctx context.Context, dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRawQueryMockRecorder) Scan(ctx any, dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, dest...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRawQuery)(nil).Scan), varargs...)
}

// MockSwiftDb is a mock of SwiftDb interface.
type MockSwiftDb struct {
	ctrl     *gomock.Controller
	recorder *MockSwiftDbMockRecorder
	isgomock struct{}
}

// MockSwiftDbMockRecorder is the mock recorder for MockSwiftDb.
type MockSwiftDbMockRecorder struct {
	mock *MockSwiftDb
}

// NewMockSwiftDb creates a new mock instance.
func NewMockSwiftDb(ctrl *gomock.Controller) *MockSwiftDb {
	mock := &MockSwiftDb{ctrl: ctrl}
	mock.recorder = &MockSwiftDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwiftDb) EXPECT() *MockSwiftDbMockRecorder {
	return m.recorder
}

// NewDelete mocks base method.
func (m *MockSwiftDb) NewDelete() dbs.DeleteQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(dbs.DeleteQuery)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockSwiftDbMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockSwiftDb)(nil).NewDelete))
}

// NewInsert mocks base method.
func (m *MockSwiftDb) NewInsert() dbs.InsertQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInsert")
	ret0, _ := ret[0].(dbs.InsertQuery)
	return ret0
}

// NewInsert indicates an expected call of NewInsert.
func (mr *MockSwiftDbMockRecorder) NewInsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInsert", reflect.TypeOf((*MockSwiftDb)(nil).NewInsert))
}

// NewRaw mocks base method.
func (m *MockSwiftDb) NewRaw(query string, args ...any) dbs.RawQuery {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRaw", varargs...)
	ret0, _ := ret[0].(dbs.RawQuery)
	return ret0
}

// NewRaw indicates an expected call of NewRaw.
func (mr *MockSwiftDbMockRecorder) NewRaw(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRaw", reflect.TypeOf((*MockSwiftDb)(nil).NewRaw), varargs...)
}

// NewSelect mocks base method.
func (m *MockSwiftDb) NewSelect() dbs.SelectQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSelect")
	ret0, _ := ret[0].(dbs.SelectQuery)
	return ret0
}

// NewSelect indicates an expected call of NewSelect.
func (mr *MockSwiftDbMockRecorder) NewSelect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSelect", reflect.TypeOf((*MockSwiftDb)(nil).NewSelect))
}
