// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Bartosz\GolandProjects\awesomeProject\repositories/Swift.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\Bartosz\GolandProjects\awesomeProject\repositories/Swift.go -destination=mocks/mock_swiftrepo .go -package=mocks
//

// Package mock_repositories is a generated GoMock package.
package mocks

import (
	models "awesomeProject/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSwiftRepo is a mock of SwiftRepo interface.
type MockSwiftRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSwiftRepoMockRecorder
	isgomock struct{}
}

// MockSwiftRepoMockRecorder is the mock recorder for MockSwiftRepo.
type MockSwiftRepoMockRecorder struct {
	mock *MockSwiftRepo
}

// NewMockSwiftRepo creates a new mock instance.
func NewMockSwiftRepo(ctrl *gomock.Controller) *MockSwiftRepo {
	mock := &MockSwiftRepo{ctrl: ctrl}
	mock.recorder = &MockSwiftRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwiftRepo) EXPECT() *MockSwiftRepoMockRecorder {
	return m.recorder
}

// AddSwift mocks base method.
func (m *MockSwiftRepo) AddSwift(arg0 context.Context, arg1 *models.Swift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSwift", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSwift indicates an expected call of AddSwift.
func (mr *MockSwiftRepoMockRecorder) AddSwift(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSwift", reflect.TypeOf((*MockSwiftRepo)(nil).AddSwift), arg0, arg1)
}

// DeleteSwift mocks base method.
func (m *MockSwiftRepo) DeleteSwift(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSwift", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSwift indicates an expected call of DeleteSwift.
func (mr *MockSwiftRepoMockRecorder) DeleteSwift(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwift", reflect.TypeOf((*MockSwiftRepo)(nil).DeleteSwift), arg0, arg1)
}

// GetBranchesBySwiftCode mocks base method.
func (m *MockSwiftRepo) GetBranchesBySwiftCode(arg0 context.Context, arg1 string) ([]models.SwiftMini, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchesBySwiftCode", arg0, arg1)
	ret0, _ := ret[0].([]models.SwiftMini)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchesBySwiftCode indicates an expected call of GetBranchesBySwiftCode.
func (mr *MockSwiftRepoMockRecorder) GetBranchesBySwiftCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchesBySwiftCode", reflect.TypeOf((*MockSwiftRepo)(nil).GetBranchesBySwiftCode), arg0, arg1)
}

// GetByCountryIso2Code mocks base method.
func (m *MockSwiftRepo) GetByCountryIso2Code(arg0 context.Context, arg1 string) ([]models.SwiftMini, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCountryIso2Code", arg0, arg1)
	ret0, _ := ret[0].([]models.SwiftMini)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCountryIso2Code indicates an expected call of GetByCountryIso2Code.
func (mr *MockSwiftRepoMockRecorder) GetByCountryIso2Code(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCountryIso2Code", reflect.TypeOf((*MockSwiftRepo)(nil).GetByCountryIso2Code), arg0, arg1)
}

// GetBySwiftCode mocks base method.
func (m *MockSwiftRepo) GetBySwiftCode(arg0 context.Context, arg1 string) (*models.Swift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySwiftCode", arg0, arg1)
	ret0, _ := ret[0].(*models.Swift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySwiftCode indicates an expected call of GetBySwiftCode.
func (mr *MockSwiftRepoMockRecorder) GetBySwiftCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySwiftCode", reflect.TypeOf((*MockSwiftRepo)(nil).GetBySwiftCode), arg0, arg1)
}

// GetCountryNameByIso2Code mocks base method.
func (m *MockSwiftRepo) GetCountryNameByIso2Code(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryNameByIso2Code", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryNameByIso2Code indicates an expected call of GetCountryNameByIso2Code.
func (mr *MockSwiftRepoMockRecorder) GetCountryNameByIso2Code(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryNameByIso2Code", reflect.TypeOf((*MockSwiftRepo)(nil).GetCountryNameByIso2Code), arg0, arg1)
}
