// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Bartosz\GolandProjects\awesomeProject\services\SwiftCodes.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\Bartosz\GolandProjects\awesomeProject\services\SwiftCodes.go -destination=mocks/mock_swiftservice .go -package=mocks
//

// Package mock_services is a generated GoMock package.
package mocks

import (
	models "awesomeProject/models"
	repositories "awesomeProject/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSwiftService is a mock of SwiftService interface.
type MockSwiftService struct {
	ctrl     *gomock.Controller
	recorder *MockSwiftServiceMockRecorder
	isgomock struct{}
}

// MockSwiftServiceMockRecorder is the mock recorder for MockSwiftService.
type MockSwiftServiceMockRecorder struct {
	mock *MockSwiftService
}

// NewMockSwiftService creates a new mock instance.
func NewMockSwiftService(ctrl *gomock.Controller) *MockSwiftService {
	mock := &MockSwiftService{ctrl: ctrl}
	mock.recorder = &MockSwiftServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwiftService) EXPECT() *MockSwiftServiceMockRecorder {
	return m.recorder
}

// AddSwift mocks base method.
func (m *MockSwiftService) AddSwift(ctx context.Context, swift *models.Swift, swiftRepo repositories.SwiftRepo, validate models.SwiftValidator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSwift", ctx, swift, swiftRepo, validate)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSwift indicates an expected call of AddSwift.
func (mr *MockSwiftServiceMockRecorder) AddSwift(ctx, swift, swiftRepo, validate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSwift", reflect.TypeOf((*MockSwiftService)(nil).AddSwift), ctx, swift, swiftRepo, validate)
}

// DeleteSwift mocks base method.
func (m *MockSwiftService) DeleteSwift(ctx context.Context, swiftCode string, swiftRepo repositories.SwiftRepo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSwift", ctx, swiftCode, swiftRepo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSwift indicates an expected call of DeleteSwift.
func (mr *MockSwiftServiceMockRecorder) DeleteSwift(ctx, swiftCode, swiftRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwift", reflect.TypeOf((*MockSwiftService)(nil).DeleteSwift), ctx, swiftCode, swiftRepo)
}

// GetSwiftDetails mocks base method.
func (m *MockSwiftService) GetSwiftDetails(ctx context.Context, swiftCode string, swiftRepo repositories.SwiftRepo) (*models.Swift, []models.SwiftMini, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwiftDetails", ctx, swiftCode, swiftRepo)
	ret0, _ := ret[0].(*models.Swift)
	ret1, _ := ret[1].([]models.SwiftMini)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSwiftDetails indicates an expected call of GetSwiftDetails.
func (mr *MockSwiftServiceMockRecorder) GetSwiftDetails(ctx, swiftCode, swiftRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwiftDetails", reflect.TypeOf((*MockSwiftService)(nil).GetSwiftDetails), ctx, swiftCode, swiftRepo)
}

// GetSwiftsDetailsByCountryIso2Code mocks base method.
func (m *MockSwiftService) GetSwiftsDetailsByCountryIso2Code(ctx context.Context, countryIso2Code string, swiftRepo repositories.SwiftRepo) (string, []models.SwiftMini, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwiftsDetailsByCountryIso2Code", ctx, countryIso2Code, swiftRepo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]models.SwiftMini)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSwiftsDetailsByCountryIso2Code indicates an expected call of GetSwiftsDetailsByCountryIso2Code.
func (mr *MockSwiftServiceMockRecorder) GetSwiftsDetailsByCountryIso2Code(ctx, countryIso2Code, swiftRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwiftsDetailsByCountryIso2Code", reflect.TypeOf((*MockSwiftService)(nil).GetSwiftsDetailsByCountryIso2Code), ctx, countryIso2Code, swiftRepo)
}
